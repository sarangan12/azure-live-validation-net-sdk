/* 
 * Live Validation Service Client
 *
 * Client that can be used to access Live Validation Service.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// White List Response
    /// </summary>
    [DataContract]
    public partial class LiveValidationWhiteListResponse :  IEquatable<LiveValidationWhiteListResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveValidationWhiteListResponse" /> class.
        /// </summary>
        /// <param name="SafeProperties">Object that consists of several key/values. Keys will be namespaces. Values will be array of resource types..</param>
        public LiveValidationWhiteListResponse(Object SafeProperties = default(Object))
        {
            this.SafeProperties = SafeProperties;
        }
        
        /// <summary>
        /// Object that consists of several key/values. Keys will be namespaces. Values will be array of resource types.
        /// </summary>
        /// <value>Object that consists of several key/values. Keys will be namespaces. Values will be array of resource types.</value>
        [DataMember(Name="safeProperties", EmitDefaultValue=false)]
        public Object SafeProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LiveValidationWhiteListResponse {\n");
            sb.Append("  SafeProperties: ").Append(SafeProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LiveValidationWhiteListResponse);
        }

        /// <summary>
        /// Returns true if LiveValidationWhiteListResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LiveValidationWhiteListResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiveValidationWhiteListResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SafeProperties == input.SafeProperties ||
                    (this.SafeProperties != null &&
                    this.SafeProperties.Equals(input.SafeProperties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SafeProperties != null)
                    hashCode = hashCode * 59 + this.SafeProperties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
