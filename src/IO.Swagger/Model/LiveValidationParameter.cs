/* 
 * Live Validation Service Client
 *
 * Client that can be used to access Live Validation Service.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Live Validation Parameter
    /// </summary>
    [DataContract]
    public partial class LiveValidationParameter :  IEquatable<LiveValidationParameter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveValidationParameter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LiveValidationParameter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveValidationParameter" /> class.
        /// </summary>
        /// <param name="LiveRequest">Live Request (required).</param>
        /// <param name="LiveResponse">Live Response (required).</param>
        public LiveValidationParameter(LiveRequest LiveRequest = default(LiveRequest), LiveResponse LiveResponse = default(LiveResponse))
        {
            // to ensure "LiveRequest" is required (not null)
            if (LiveRequest == null)
            {
                throw new InvalidDataException("LiveRequest is a required property for LiveValidationParameter and cannot be null");
            }
            else
            {
                this.LiveRequest = LiveRequest;
            }
            // to ensure "LiveResponse" is required (not null)
            if (LiveResponse == null)
            {
                throw new InvalidDataException("LiveResponse is a required property for LiveValidationParameter and cannot be null");
            }
            else
            {
                this.LiveResponse = LiveResponse;
            }
        }
        
        /// <summary>
        /// Live Request
        /// </summary>
        /// <value>Live Request</value>
        [DataMember(Name="liveRequest", EmitDefaultValue=false)]
        public LiveRequest LiveRequest { get; set; }

        /// <summary>
        /// Live Response
        /// </summary>
        /// <value>Live Response</value>
        [DataMember(Name="liveResponse", EmitDefaultValue=false)]
        public LiveResponse LiveResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LiveValidationParameter {\n");
            sb.Append("  LiveRequest: ").Append(LiveRequest).Append("\n");
            sb.Append("  LiveResponse: ").Append(LiveResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LiveValidationParameter);
        }

        /// <summary>
        /// Returns true if LiveValidationParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of LiveValidationParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiveValidationParameter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LiveRequest == input.LiveRequest ||
                    (this.LiveRequest != null &&
                    this.LiveRequest.Equals(input.LiveRequest))
                ) && 
                (
                    this.LiveResponse == input.LiveResponse ||
                    (this.LiveResponse != null &&
                    this.LiveResponse.Equals(input.LiveResponse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LiveRequest != null)
                    hashCode = hashCode * 59 + this.LiveRequest.GetHashCode();
                if (this.LiveResponse != null)
                    hashCode = hashCode * 59 + this.LiveResponse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
