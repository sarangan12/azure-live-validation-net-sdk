/* 
 * Live Validation Service Client
 *
 * Client that can be used to access Live Validation Service.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Live Response
    /// </summary>
    [DataContract]
    public partial class LiveResponse :  IEquatable<LiveResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LiveResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveResponse" /> class.
        /// </summary>
        /// <param name="StatusCode">Status code of the Response. (required).</param>
        /// <param name="Headers">Headers of the Live Response. (required).</param>
        /// <param name="Body">Body of the Live Response..</param>
        public LiveResponse(string StatusCode = default(string), Object Headers = default(Object), Object Body = default(Object))
        {
            // to ensure "StatusCode" is required (not null)
            if (StatusCode == null)
            {
                throw new InvalidDataException("StatusCode is a required property for LiveResponse and cannot be null");
            }
            else
            {
                this.StatusCode = StatusCode;
            }
            // to ensure "Headers" is required (not null)
            if (Headers == null)
            {
                throw new InvalidDataException("Headers is a required property for LiveResponse and cannot be null");
            }
            else
            {
                this.Headers = Headers;
            }
            this.Body = Body;
        }
        
        /// <summary>
        /// Status code of the Response.
        /// </summary>
        /// <value>Status code of the Response.</value>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public string StatusCode { get; set; }

        /// <summary>
        /// Headers of the Live Response.
        /// </summary>
        /// <value>Headers of the Live Response.</value>
        [DataMember(Name="headers", EmitDefaultValue=false)]
        public Object Headers { get; set; }

        /// <summary>
        /// Body of the Live Response.
        /// </summary>
        /// <value>Body of the Live Response.</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public Object Body { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LiveResponse {\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LiveResponse);
        }

        /// <summary>
        /// Returns true if LiveResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LiveResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiveResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.Headers == input.Headers ||
                    (this.Headers != null &&
                    this.Headers.Equals(input.Headers))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
