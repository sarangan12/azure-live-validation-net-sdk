/* 
 * Live Validation Service Client
 *
 * Client that can be used to access Live Validation Service.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validation result of the live request
    /// </summary>
    [DataContract]
    public partial class RequestValidationResult :  IEquatable<RequestValidationResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestValidationResult" /> class.
        /// </summary>
        /// <param name="SuccessfulRequest">Indicates if the request is successful.</param>
        /// <param name="Errors">List of Errors..</param>
        /// <param name="OperationInfo">Operation Info.</param>
        public RequestValidationResult(Object SuccessfulRequest = default(Object), List<Object> Errors = default(List<Object>), List<Object> OperationInfo = default(List<Object>))
        {
            this.SuccessfulRequest = SuccessfulRequest;
            this.Errors = Errors;
            this.OperationInfo = OperationInfo;
        }
        
        /// <summary>
        /// Indicates if the request is successful
        /// </summary>
        /// <value>Indicates if the request is successful</value>
        [DataMember(Name="successfulRequest", EmitDefaultValue=false)]
        public Object SuccessfulRequest { get; set; }

        /// <summary>
        /// List of Errors.
        /// </summary>
        /// <value>List of Errors.</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<Object> Errors { get; set; }

        /// <summary>
        /// Operation Info
        /// </summary>
        /// <value>Operation Info</value>
        [DataMember(Name="operationInfo", EmitDefaultValue=false)]
        public List<Object> OperationInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestValidationResult {\n");
            sb.Append("  SuccessfulRequest: ").Append(SuccessfulRequest).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  OperationInfo: ").Append(OperationInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestValidationResult);
        }

        /// <summary>
        /// Returns true if RequestValidationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestValidationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestValidationResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SuccessfulRequest == input.SuccessfulRequest ||
                    (this.SuccessfulRequest != null &&
                    this.SuccessfulRequest.Equals(input.SuccessfulRequest))
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.OperationInfo == input.OperationInfo ||
                    this.OperationInfo != null &&
                    this.OperationInfo.SequenceEqual(input.OperationInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SuccessfulRequest != null)
                    hashCode = hashCode * 59 + this.SuccessfulRequest.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                if (this.OperationInfo != null)
                    hashCode = hashCode * 59 + this.OperationInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
